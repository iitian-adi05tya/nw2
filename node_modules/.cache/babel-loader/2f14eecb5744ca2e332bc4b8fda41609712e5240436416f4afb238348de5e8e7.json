{"ast":null,"code":"var _jsxFileName = \"/Users/iitianaditya/nw/src/components/LandingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport './LandingPage.css';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LandingPage = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // 1. Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(10, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true\n    });\n\n    // Set the renderer size and background color to white\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // Set the background color to white\n\n    // Append the canvas to the body\n    document.body.appendChild(renderer.domElement);\n\n    // Set a height greater than the viewport to allow scrolling\n    document.body.style.height = \"500vh\"; // 5 times the height of the viewport\n\n    // 2. Lighting\n    const light = new THREE.AmbientLight(0xffffff, 1.5); // Ambient light\n    scene.add(light);\n\n    // Add a directional light to illuminate the model better\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5).normalize();\n    scene.add(directionalLight);\n\n    // 3. Load Video Texture for Background\n    const video = document.createElement('video');\n    video.src = '/assets/intro.mp4'; // Path to your video file\n    video.loop = true;\n    video.muted = true; // Mute video to avoid sound\n    video.load(); // Ensure the video is loaded\n\n    // 4. Play video on user interaction (click)\n    const startVideo = () => {\n      video.play().catch(error => {\n        console.error('Error attempting to play video:', error);\n      });\n      window.removeEventListener('click', startVideo); // Remove the event listener after the first interaction\n    };\n    window.addEventListener('click', startVideo); // Wait for a click to start the video\n\n    // Create a video texture\n    const videoTexture = new THREE.VideoTexture(video);\n    videoTexture.minFilter = THREE.LinearFilter; // Ensures smooth playback at different resolutions\n    videoTexture.magFilter = THREE.LinearFilter;\n\n    // 5. Create a large plane to hold the video texture and fit the entire screen\n    const geometry = new THREE.PlaneGeometry(2, 2); // Plane size adjusted to fit the viewport\n    const material = new THREE.MeshBasicMaterial({\n      map: videoTexture,\n      side: THREE.DoubleSide\n    });\n    const plane = new THREE.Mesh(geometry, material);\n\n    // Make the plane cover the whole viewport by scaling it\n    plane.scale.set(window.innerWidth / window.innerHeight, 1, 1); // Adjust the aspect ratio of the plane to fit the screen\n    plane.position.z = -1; // Position it closer to the camera to cover the screen\n    scene.add(plane);\n\n    // 6. Load GLTF Model\n    const loader = new GLTFLoader();\n    let propeller = null;\n    loader.load('./a.glb', gltf => {\n      propeller = gltf.scene;\n      scene.add(propeller);\n\n      // Scale and position the propeller for visibility\n      propeller.scale.set(10, 10, 10); // Make it larger (adjust as needed)\n\n      // Place the propeller slightly towards the right (adjust the value as needed)\n      propeller.position.set(15, 0, 0); // Move 15 units to the right along the X-axis\n\n      // Rotate the propeller to make it vertical and facing the camera\n      propeller.rotation.x = Math.PI / 2; // Rotate 90 degrees along the X axis to make it vertical\n      propeller.rotation.y = 0; // Reset any rotation on the Y axis\n\n      console.log(\"Model loaded successfully!\");\n    }, undefined, error => {\n      console.error(\"Error loading GLTF model:\", error);\n    });\n\n    // 7. Add OrbitControls to make the scene interactive\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.screenSpacePanning = false;\n    controls.maxPolarAngle = Math.PI / 2; // Prevent the user from rotating upside down\n    controls.enableZoom = true;\n\n    // 8. Track Mouse Movement for Propeller Rotation\n    const mouse = new THREE.Vector2(); // Mouse position\n    const onMouseMove = event => {\n      // Normalize mouse position ([-1, 1]) based on window dimensions\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      // Rotate the propeller to follow the mouse position\n      if (propeller) {\n        // Adjust the propeller's rotation based on mouse position\n        propeller.rotation.x = Math.PI / 2 + mouse.y * Math.PI / 6; // Tilt around X axis\n        propeller.rotation.y = mouse.x * Math.PI / 3; // Rotate around Y axis\n      }\n    };\n    window.addEventListener('mousemove', onMouseMove);\n\n    // 9. Animate the model with continuous rotation\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Continuous rotation of the propeller (rotating around Y-axis)\n      if (propeller) {\n        propeller.rotation.y += 0.05; // Rotate the propeller around Y-axis like a real propeller\n      }\n\n      // Zoom effect based on scroll (camera zoom in/out)\n      const zoomFactor = 10 + window.scrollY / window.innerHeight * 20; // Adjust zoom range to zoom out more\n      camera.position.z = zoomFactor;\n\n      // Move the propeller and rotate it based on scroll\n      if (propeller) {\n        propeller.position.x = window.scrollY / window.innerHeight * 5; // Move to the side on scroll\n        propeller.position.y = -(window.scrollY / window.innerHeight) * 1; // Move slightly downward\n      }\n\n      // Update OrbitControls\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Set the camera's initial position to ensure visibility\n    camera.position.z = 100; // Zoomed out initial position\n\n    // 10. Load font and create 3D text\n    const fontLoader = new FontLoader();\n    fontLoader.load('/assets/helvetiker_regular.typeface.json', font => {\n      const textGeometry = new TextGeometry('Drag me to see in 3D', {\n        font: font,\n        size: 10,\n        height: 1\n      });\n      const textMaterial = new THREE.MeshBasicMaterial({\n        color: 0x000000\n      });\n      const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      textMesh.position.set(-35, 0, -50); // Position it in front of the camera\n\n      scene.add(textMesh);\n    });\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('click', startVideo); // Cleanup the click listener\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        background: 'transparent',\n        zIndex: 10,\n        // Ensures the navbar is above the video\n        padding: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-overlay\",\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        left: '75px',\n        color: 'white',\n        fontWeight: 'bold',\n        fontSize: '114px',\n        zIndex: 15,\n        textShadow: '2px 2px 5px rgba(0, 0, 0, 0.7)'\n      },\n      children: \"Electrifying Global Aviation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        color: 'white',\n        fontWeight: 'bold',\n        fontSize: '24px',\n        zIndex: 15,\n        transform: 'translate(-50%, -50%)'\n      },\n      children: \"Drag me to see in 3D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(LandingPage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = LandingPage;\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","GLTFLoader","OrbitControls","TextGeometry","FontLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","LandingPage","_s","canvasRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","canvas","current","antialias","setSize","setClearColor","document","body","appendChild","domElement","style","height","light","AmbientLight","add","directionalLight","DirectionalLight","position","set","normalize","video","createElement","src","loop","muted","load","startVideo","play","catch","error","console","removeEventListener","addEventListener","videoTexture","VideoTexture","minFilter","LinearFilter","magFilter","geometry","PlaneGeometry","material","MeshBasicMaterial","map","side","DoubleSide","plane","Mesh","scale","z","loader","propeller","gltf","rotation","x","Math","PI","y","log","undefined","controls","enableDamping","dampingFactor","screenSpacePanning","maxPolarAngle","enableZoom","mouse","Vector2","onMouseMove","event","clientX","clientY","animate","requestAnimationFrame","zoomFactor","scrollY","update","render","fontLoader","font","textGeometry","size","textMaterial","color","textMesh","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","top","left","right","background","zIndex","padding","className","bottom","fontWeight","fontSize","textShadow","transform","_c","$RefreshReg$"],"sources":["/Users/iitianaditya/nw/src/components/LandingPage.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport './LandingPage.css';\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\n\nconst LandingPage = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // 1. Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(10, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current, antialias: true });\n\n    // Set the renderer size and background color to white\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1);  // Set the background color to white\n\n    // Append the canvas to the body\n    document.body.appendChild(renderer.domElement);\n\n    // Set a height greater than the viewport to allow scrolling\n    document.body.style.height = \"500vh\"; // 5 times the height of the viewport\n\n    // 2. Lighting\n    const light = new THREE.AmbientLight(0xffffff, 1.5);  // Ambient light\n    scene.add(light);\n\n    // Add a directional light to illuminate the model better\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5).normalize();\n    scene.add(directionalLight);\n\n    // 3. Load Video Texture for Background\n    const video = document.createElement('video');\n    video.src = '/assets/intro.mp4';  // Path to your video file\n    video.loop = true;\n    video.muted = true;  // Mute video to avoid sound\n    video.load();  // Ensure the video is loaded\n\n    // 4. Play video on user interaction (click)\n    const startVideo = () => {\n      video.play().catch((error) => {\n        console.error('Error attempting to play video:', error);\n      });\n      window.removeEventListener('click', startVideo);  // Remove the event listener after the first interaction\n    };\n\n    window.addEventListener('click', startVideo);  // Wait for a click to start the video\n\n    // Create a video texture\n    const videoTexture = new THREE.VideoTexture(video);\n    videoTexture.minFilter = THREE.LinearFilter;  // Ensures smooth playback at different resolutions\n    videoTexture.magFilter = THREE.LinearFilter;\n\n    // 5. Create a large plane to hold the video texture and fit the entire screen\n    const geometry = new THREE.PlaneGeometry(2, 2);  // Plane size adjusted to fit the viewport\n    const material = new THREE.MeshBasicMaterial({ map: videoTexture, side: THREE.DoubleSide });\n    const plane = new THREE.Mesh(geometry, material);\n\n    // Make the plane cover the whole viewport by scaling it\n    plane.scale.set(window.innerWidth / window.innerHeight, 1, 1);  // Adjust the aspect ratio of the plane to fit the screen\n    plane.position.z = -1;  // Position it closer to the camera to cover the screen\n    scene.add(plane);\n\n    // 6. Load GLTF Model\n    const loader = new GLTFLoader();\n    let propeller = null;\n\n    loader.load('./a.glb', (gltf) => {\n      propeller = gltf.scene;\n      scene.add(propeller);\n\n      // Scale and position the propeller for visibility\n      propeller.scale.set(10, 10, 10);  // Make it larger (adjust as needed)\n      \n      // Place the propeller slightly towards the right (adjust the value as needed)\n      propeller.position.set(15, 0, 0);  // Move 15 units to the right along the X-axis\n\n      // Rotate the propeller to make it vertical and facing the camera\n      propeller.rotation.x = Math.PI / 2; // Rotate 90 degrees along the X axis to make it vertical\n      propeller.rotation.y = 0;  // Reset any rotation on the Y axis\n\n      console.log(\"Model loaded successfully!\");\n    }, undefined, (error) => {\n      console.error(\"Error loading GLTF model:\", error);\n    });\n\n    // 7. Add OrbitControls to make the scene interactive\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.screenSpacePanning = false;\n    controls.maxPolarAngle = Math.PI / 2; // Prevent the user from rotating upside down\n    controls.enableZoom = true;\n\n    // 8. Track Mouse Movement for Propeller Rotation\n    const mouse = new THREE.Vector2(); // Mouse position\n    const onMouseMove = (event) => {\n      // Normalize mouse position ([-1, 1]) based on window dimensions\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      // Rotate the propeller to follow the mouse position\n      if (propeller) {\n        // Adjust the propeller's rotation based on mouse position\n        propeller.rotation.x = Math.PI / 2 + mouse.y * Math.PI / 6;  // Tilt around X axis\n        propeller.rotation.y = mouse.x * Math.PI / 3;  // Rotate around Y axis\n      }\n    };\n\n    window.addEventListener('mousemove', onMouseMove);\n\n    // 9. Animate the model with continuous rotation\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Continuous rotation of the propeller (rotating around Y-axis)\n      if (propeller) {\n        propeller.rotation.y += 0.05;  // Rotate the propeller around Y-axis like a real propeller\n      }\n\n      // Zoom effect based on scroll (camera zoom in/out)\n      const zoomFactor = 10 + window.scrollY / window.innerHeight * 20;  // Adjust zoom range to zoom out more\n      camera.position.z = zoomFactor;\n\n      // Move the propeller and rotate it based on scroll\n      if (propeller) {\n        propeller.position.x = window.scrollY / window.innerHeight * 5;  // Move to the side on scroll\n        propeller.position.y = -(window.scrollY / window.innerHeight) * 1;  // Move slightly downward\n      }\n\n      // Update OrbitControls\n      controls.update();\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Set the camera's initial position to ensure visibility\n    camera.position.z = 100;  // Zoomed out initial position\n\n    // 10. Load font and create 3D text\n    const fontLoader = new FontLoader();\n    fontLoader.load('/assets/helvetiker_regular.typeface.json', (font) => {\n      const textGeometry = new TextGeometry('Drag me to see in 3D', {\n        font: font,\n        size: 10,\n        height: 1,\n      });\n\n      const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n      const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      \n      textMesh.position.set(-35, 0, -50);  // Position it in front of the camera\n\n      scene.add(textMesh);\n    });\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('click', startVideo); // Cleanup the click listener\n    };\n  }, []);\n\n  return (\n    <>\n      <canvas ref={canvasRef} />\n      {/* Navbar */}\n      <nav style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        background: 'transparent',\n        zIndex: 10, // Ensures the navbar is above the video\n        padding: '10px',\n      }}>\n        <h1 style={{ color: 'white' }}></h1>\n      </nav>\n      {/* Text Overlay */}\n      <div className=\"text-overlay\"\n        style={{\n          position: 'absolute',\n          bottom: '20px',\n          left: '75px',\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '114px',\n          zIndex: 15,\n          textShadow: '2px 2px 5px rgba(0, 0, 0, 0.7)',\n        }}\n      >\n        Electrifying Global Aviation\n      </div>\n      {/* 3D Text to drag */}\n      <div style={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        color: 'white',\n        fontWeight: 'bold',\n        fontSize: '24px',\n        zIndex: 15,\n        transform: 'translate(-50%, -50%)',\n      }}>\n        Drag me to see in 3D\n      </div>\n    </>\n  );\n};\n\nexport default LandingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}