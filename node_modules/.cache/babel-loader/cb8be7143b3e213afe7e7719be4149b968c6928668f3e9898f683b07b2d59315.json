{"ast":null,"code":"var _jsxFileName = \"/Users/iitianaditya/nw/src/components/LandingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LandingPage = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // 1. Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true\n    });\n\n    // Set the renderer size and background color to white\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1); // Set the background color to white\n\n    // Append the canvas to the body\n    document.body.appendChild(renderer.domElement);\n\n    // 2. Lighting\n    const light = new THREE.AmbientLight(0xffffff, 1.5); // Ambient light\n    scene.add(light);\n\n    // Add a directional light to illuminate the model better\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5).normalize();\n    scene.add(directionalLight);\n\n    // 3. Load GLTF Model\n    const loader = new GLTFLoader();\n    let propeller = null;\n    loader.load('./a.glb', gltf => {\n      propeller = gltf.scene;\n      scene.add(propeller);\n\n      // Scale and initial position\n      propeller.scale.set(10, 10, 10); // Initial scale for propeller\n      propeller.position.set(0, 0, 0); // Center the propeller\n\n      // Rotate the propeller to make it vertical and facing the viewer\n      propeller.rotation.x = Math.PI / 2; // Rotate 90 degrees along X axis to make it vertical\n\n      // Rotate the blades around Y axis to simulate the propeller spinning\n      propeller.children[0].rotation.y = Math.PI / 6; // Adjust this to focus on one blade\n\n      console.log(\"Model loaded successfully!\");\n    }, undefined, error => {\n      console.error(\"Error loading GLTF model:\", error);\n    });\n\n    // 4. Scroll effect\n    let scrollFactor = 0;\n    let zoomFactor = 5;\n    const handleScroll = () => {\n      scrollFactor = window.scrollY / window.innerHeight; // Normalize scroll value\n\n      // Control zooming in and out\n      zoomFactor = 5 + scrollFactor * 10; // Zoom based on scroll\n\n      // Zooming in to a single blade (focus on a blade's position)\n      camera.position.z = zoomFactor;\n\n      // Rotate the whole propeller when scrolling\n      if (propeller) {\n        propeller.rotation.y += 0.01 + scrollFactor * 0.05; // Adjust rotation speed\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n\n    // 5. Orbit controls for 3D interactivity when zoomed out\n    let controls = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Only enable orbit controls after a certain scroll threshold\n      if (zoomFactor > 15) {\n        if (!controls) {\n          controls = new OrbitControls(camera, renderer.domElement);\n          controls.enableZoom = true; // Allow zooming in and out\n          controls.enableRotate = true; // Allow rotating the model\n          controls.enablePan = true; // Allow panning\n        }\n      }\n\n      // Render the scene\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n_s(LandingPage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = LandingPage;\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","GLTFLoader","OrbitControls","jsxDEV","_jsxDEV","LandingPage","_s","canvasRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","canvas","current","antialias","setSize","setClearColor","document","body","appendChild","domElement","light","AmbientLight","add","directionalLight","DirectionalLight","position","set","normalize","loader","propeller","load","gltf","scale","rotation","x","Math","PI","children","y","console","log","undefined","error","scrollFactor","zoomFactor","handleScroll","scrollY","z","addEventListener","controls","animate","requestAnimationFrame","enableZoom","enableRotate","enablePan","render","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/iitianaditya/nw/src/components/LandingPage.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst LandingPage = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // 1. Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current, antialias: true });\n\n    // Set the renderer size and background color to white\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xffffff, 1);  // Set the background color to white\n\n    // Append the canvas to the body\n    document.body.appendChild(renderer.domElement);\n\n    // 2. Lighting\n    const light = new THREE.AmbientLight(0xffffff, 1.5);  // Ambient light\n    scene.add(light);\n\n    // Add a directional light to illuminate the model better\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5).normalize();\n    scene.add(directionalLight);\n\n    // 3. Load GLTF Model\n    const loader = new GLTFLoader();\n    let propeller = null;\n\n    loader.load('./a.glb', (gltf) => {\n      propeller = gltf.scene;\n      scene.add(propeller);\n\n      // Scale and initial position\n      propeller.scale.set(10, 10, 10);  // Initial scale for propeller\n      propeller.position.set(0, 0, 0);  // Center the propeller\n      \n      // Rotate the propeller to make it vertical and facing the viewer\n      propeller.rotation.x = Math.PI / 2;  // Rotate 90 degrees along X axis to make it vertical\n\n      // Rotate the blades around Y axis to simulate the propeller spinning\n      propeller.children[0].rotation.y = Math.PI / 6; // Adjust this to focus on one blade\n\n      console.log(\"Model loaded successfully!\");\n    }, undefined, (error) => {\n      console.error(\"Error loading GLTF model:\", error);\n    });\n\n    // 4. Scroll effect\n    let scrollFactor = 0;\n    let zoomFactor = 5;\n\n    const handleScroll = () => {\n      scrollFactor = window.scrollY / window.innerHeight;  // Normalize scroll value\n\n      // Control zooming in and out\n      zoomFactor = 5 + scrollFactor * 10;  // Zoom based on scroll\n\n      // Zooming in to a single blade (focus on a blade's position)\n      camera.position.z = zoomFactor;\n\n      // Rotate the whole propeller when scrolling\n      if (propeller) {\n        propeller.rotation.y += 0.01 + scrollFactor * 0.05;  // Adjust rotation speed\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    // 5. Orbit controls for 3D interactivity when zoomed out\n    let controls = null;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Only enable orbit controls after a certain scroll threshold\n      if (zoomFactor > 15) {\n        if (!controls) {\n          controls = new OrbitControls(camera, renderer.domElement);\n          controls.enableZoom = true;  // Allow zooming in and out\n          controls.enableRotate = true;  // Allow rotating the model\n          controls.enablePan = true;  // Allow panning\n        }\n      }\n\n      // Render the scene\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default LandingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}